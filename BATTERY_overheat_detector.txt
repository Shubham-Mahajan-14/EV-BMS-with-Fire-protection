/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c-lcd.h"   // Custom LCD library for STM32 (HD44780 over I2C)

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
I2C_HandleTypeDef hi2c1;

/* Pin Definitions */
#define RELAY_PIN   GPIO_PIN_7
#define RELAY_PORT  GPIOA
#define BUZZER_PIN  GPIO_PIN_4
#define BUZZER_PORT GPIOA

uint32_t adcValue = 0;
int temperature = 0;

/* Function prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
  /* MCU Configuration */
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  
  /* Initialize LCD */
  lcd_init();
  lcd_send_string("Battery Overheat");
  lcd_put_cur(1, 0);
  lcd_send_string("   Detector   ");
  HAL_Delay(3000);
  lcd_clear();

  while (1)
  {
    /* Start ADC Conversion */
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    adcValue = HAL_ADC_GetValue(&hadc1);

    /* Convert ADC to Celsius (example: LM35 sensor) */
    // STM32 ADC is 12-bit (0-4095). Assuming 3.3V reference.
    // LM35: 10mV/°C → Temp = (ADC * 3.3 / 4096) / 0.01
    temperature = (int)((adcValue * 3.3 / 4096.0) / 0.01);

    /* Display Temperature */
    lcd_put_cur(0,0);
    lcd_send_string("Temperature:");
    char buffer[16];
    sprintf(buffer, "%d C", temperature);
    lcd_put_cur(1,0);
    lcd_send_string(buffer);

    /* Check threshold */
    if (temperature > 35) {
        HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
        lcd_put_cur(1,10);
        lcd_send_string("OFF");
    } else {
        HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
        lcd_put_cur(1,10);
        lcd_send_string("ON ");
    }

    HAL_Delay(500);
    lcd_clear();
  }
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};

  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  HAL_ADC_Init(&hadc1);

  sConfig.Channel = ADC_CHANNEL_0;    // A0 equivalent
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&hi2c1);
}

/* GPIO init function */
static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Relay + Buzzer pins */
  GPIO_InitStruct.Pin = RELAY_PIN | BUZZER_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}
